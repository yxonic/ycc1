// -*- mode: c++ -*-

#pragma once

#include <string>
#include <sstream>
#include <map>
#include <memory>

#include "AST.h"
#include "Lexer.h"
// The header below is generated by bison, providing yy::Parser.
#include "Parser.tab.hh"

/// ParsingDriver - Front-end of the C1 compiler. It converts raw file
/// to a well-structured AST.
class ParsingDriver {

    enum ErrorLevel {
        Error, Warning, Info
    };

    std::string _file_name;

    /// Input stream to be provide to the lexer.
    std::stringstream _in_stream;

    /// Pointer to the lexer.
    std::shared_ptr<yy::Lexer> _lexer;

    /// Pointer to the parser.
    std::shared_ptr<yy::Parser> _parser;

    /// AST root.
    std::shared_ptr<ast::AST> _ast_root;

public:
    ParsingDriver(std::string file_name);

    friend class yy::Parser;
    friend class yy::Lexer;

    /// The name of the file being parsed. Empty if the driver is run
    /// on stdin.
    const std::string &file_name = _file_name;
    const std::shared_ptr<ast::AST> &ast_root = _ast_root;


    /// Main parsing process. It sets AST root and reports
    /// errors/warnings encountered.
    void parse();

private:
    // Lexer initialization. Set input stream for the lexer.
    void initializeLexer();

    // Parser initialization.
    void initializeParser();

    // Error reporting.
    void error(std::string, ErrorLevel = Error);
    void error(std::string, const yy::location &, ErrorLevel = Error);
    void warning(std::string);
    void warning(std::string, const yy::location &);
    void info(std::string);
    void info(std::string, const yy::location &);

    std::string fit_text(std::string, size_t, bool = false);
};
